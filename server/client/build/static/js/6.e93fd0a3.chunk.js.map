{"version":3,"sources":["components/stripe-button/stripe-button.component.jsx","components/checkout-item/checkout-item.styles.jsx","components/checkout-item/checkout-item.component.jsx","pages/checkout/checkout.styles.jsx","pages/checkout/checkout.component.jsx"],"names":["StripeCheckoutButton","price","priceForStripe","label","name","billingAddress","shippingAddress","image","description","amount","panelLabel","token","axios","url","method","data","then","response","alert","catch","error","console","log","JSON","parse","stripeKey","CheckoutItemContainer","styled","div","ImageContainer","TextContainer","span","QuantityContainer","RemoveButtonContainer","connect","dispatch","clearItem","item","clearItemFromCart","addItem","removeItem","cartItem","imageUrl","quantity","src","alt","onClick","CheckoutPageContainer","CheckoutHeaderContainer","HeaderBlockContainer","TotalContainer","WarningContainer","mapStateToProps","createStructuredSelector","cartItems","selectCartItems","total","selectCartTotal","map","key","id"],"mappings":"qMAyCeA,EApCc,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACtBC,EAAyB,IAARD,EAmBvB,OACI,kBAAC,IAAD,CACIE,MAAM,UACNC,KAAK,sBACLC,gBAAc,EACdC,iBAAe,EACfC,MAAM,iCACNC,YAAW,0BAAqBP,GAChCQ,OAAQP,EACRQ,WAAW,UACXC,MA1BQ,SAAAA,GACZC,IAAM,CACFC,IAAK,UACLC,OAAQ,OACRC,KAAM,CACFN,OAAQP,EACRS,WAELK,MAAK,SAAAC,GACJC,MAAM,yBACPC,OAAM,SAAAC,GACLC,QAAQC,IAAI,gBAAiBC,KAAKC,MAAMJ,IACxCF,MAAM,+FAeNO,UA7Be,sC,04BCLpB,IAAMC,EAAwBC,IAAOC,IAAV,KAarBC,EAAiBF,IAAOC,IAAV,KASdE,EAAgBH,IAAOI,KAAV,KAObC,EAAoBL,YAAOG,EAAPH,CAAH,KAUjBM,EAAwBN,IAAOC,IAAV,KCGnBM,cACb,MAPyB,SAAAC,GAAQ,MAAK,CACtCC,UAAW,SAAAC,GAAI,OAAIF,EAASG,YAAkBD,KAC9CE,QAAS,SAAAF,GAAI,OAAIF,EAASI,YAAQF,KAClCG,WAAY,SAAAH,GAAI,OAAIF,EAASK,YAAWH,QAG3BH,EA3BM,SAAC,GAAkD,IAAhDO,EAA+C,EAA/CA,SAAUL,EAAqC,EAArCA,UAAWG,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAC5CpC,EAAoCqC,EAApCrC,KAAMsC,EAA8BD,EAA9BC,SAAUzC,EAAoBwC,EAApBxC,MAAO0C,EAAaF,EAAbE,SAC/B,OACE,kBAACjB,EAAD,KACE,kBAACG,EAAD,KACE,yBAAKe,IAAKF,EAAUG,IAAI,UAE1B,kBAACf,EAAD,KAAgB1B,GAChB,kBAAC4B,EAAD,KACE,yBAAKc,QAAS,kBAAMN,EAAWC,KAA/B,UACA,8BAAOE,GACP,yBAAKG,QAAS,kBAAMP,EAAQE,KAA5B,WAEF,kBAACX,EAAD,KAAgB7B,GAChB,kBAACgC,EAAD,CAAuBa,QAAS,kBAAMV,EAAUK,KAAhD,c,wjCC7BC,IAAMM,EAAwBpB,IAAOC,IAAV,KAgBrBoB,EAA0BrB,IAAOC,IAAV,KAQvBqB,EAAuBtB,IAAOC,IAAV,KAcpBsB,EAAiBvB,IAAOC,IAAV,KAMduB,EAAmBxB,IAAOC,IAAV,KCMvBwB,EAAkBC,YAAyB,CAC/CC,UAAWC,IACXC,MAAOC,MAGMvB,sBAAQkB,EAARlB,EArCM,SAAC,GAAD,IAAGoB,EAAH,EAAGA,UAAWE,EAAd,EAAcA,MAAd,OACnB,kBAACT,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,0CAEF,kBAACA,EAAD,KACE,8CAEF,kBAACA,EAAD,KACE,2CAEF,kBAACA,EAAD,KACE,wCAEF,kBAACA,EAAD,KACE,0CAGHK,EAAUI,KAAI,SAAAjB,GAAQ,OACrB,kBAAC,EAAD,CAAckB,IAAKlB,EAASmB,GAAInB,SAAUA,OAE5C,kBAACS,EAAD,gBAAyBM,GACzB,kBAACL,EAAD,gEAEE,6BAFF,+CAKA,kBAAC,EAAD,CAAsBlD,MAAOuD","file":"static/js/6.e93fd0a3.chunk.js","sourcesContent":["import React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport axios from 'axios';\n\n\nconst StripeCheckoutButton = ({ price }) => {\n    const priceForStripe = price * 100;\n    const publishableKey = 'pk_test_8xX77SkPciU88kRzuBfw2xpG';\n\n    const onToken = token => {\n        axios({ \n            url: 'payment',\n            method: 'post',\n            data: {\n                amount: priceForStripe,\n                token\n            }\n        }).then(response => {\n            alert('Payment successful')\n        }).catch(error => {\n            console.log('Payment error', JSON.parse(error));\n            alert('There was an issue with your payment. please make sure you use the provided credit cart');\n        })\n    }\n\n    return (\n        <StripeCheckout \n            label='Pay Now'\n            name=\"Imane Clothing Ltd.\"\n            billingAddress\n            shippingAddress\n            image='https://svgshare.com/i/CUz.svg'\n            description={`Your total is  $${price}`}\n            amount={priceForStripe}\n            panelLabel='Pay Now'\n            token={onToken}\n            stripeKey={publishableKey}\n        />\n    );\n};\n\nexport default StripeCheckoutButton;","import styled from 'styled-components';\n\nexport const CheckoutItemContainer = styled.div`\n  width: 100%;\n  display: flex;\n  min-height: 100px;\n  border-bottom: 1px solid darkgrey;\n  padding: 15px 0;\n  font-size: 20px;\n  align-items: center;\n  @media screen and (max-width: 800px) {\n    font-size: 18px;\n  }\n`;\n\nexport const ImageContainer = styled.div`\n  width: 23%;\n  padding-right: 15px;\n  img {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nexport const TextContainer = styled.span`\n  width: 23%;\n  @media screen and (max-width: 800px) {\n    width: 22%;\n  }\n`;\n\nexport const QuantityContainer = styled(TextContainer)`\n  display: flex;\n  span {\n    margin: 0 10px;\n  }\n  div {\n    cursor: pointer;\n  }\n`;\n\nexport const RemoveButtonContainer = styled.div`\n  padding-left: 12px;\n  cursor: pointer;\n`;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  clearItemFromCart,\n  addItem,\n  removeItem\n} from '../../redux/cart/cart.actions';\n\nimport {\n  CheckoutItemContainer,\n  ImageContainer,\n  TextContainer,\n  QuantityContainer,\n  RemoveButtonContainer\n} from './checkout-item.styles';\n\nconst CheckoutItem = ({ cartItem, clearItem, addItem, removeItem }) => {\n  const { name, imageUrl, price, quantity } = cartItem;\n  return (\n    <CheckoutItemContainer>\n      <ImageContainer>\n        <img src={imageUrl} alt='item' />\n      </ImageContainer>\n      <TextContainer>{name}</TextContainer>\n      <QuantityContainer>\n        <div onClick={() => removeItem(cartItem)}>&#10094;</div>\n        <span>{quantity}</span>\n        <div onClick={() => addItem(cartItem)}>&#10095;</div>\n      </QuantityContainer>\n      <TextContainer>{price}</TextContainer>\n      <RemoveButtonContainer onClick={() => clearItem(cartItem)}>\n        &#10005;\n      </RemoveButtonContainer>\n    </CheckoutItemContainer>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  clearItem: item => dispatch(clearItemFromCart(item)),\n  addItem: item => dispatch(addItem(item)),\n  removeItem: item => dispatch(removeItem(item))\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(CheckoutItem);","import styled from 'styled-components';\n\nexport const CheckoutPageContainer = styled.div`\n  width: 55%;\n  min-height: 90vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 50px auto 0;\n  button {\n    margin-left: auto;\n    margin-top: 50px;\n  }\n  @media screen and (max-width: 800px) {\n    width: 90%;\n  }\n`;\n\nexport const CheckoutHeaderContainer = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid darkgrey;\n`;\n\nexport const HeaderBlockContainer = styled.div`\n  text-transform: capitalize;\n  width: 23%;\n  &:last-child {\n    width: 8%;\n  }\n  @media screen and (max-width: 800px) {\n    width: 22%\n    &:last-child {\n      width: 12%;\n    }\n  }\n`;\n\nexport const TotalContainer = styled.div`\n  margin-top: 30px;\n  margin-left: auto;\n  font-size: 36px;\n`;\n\nexport const WarningContainer = styled.div`\n  text-align: center;\n  margin-top: 40px;\n  font-size: 24px;\n  color: red;\n`;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button.component';\nimport CheckoutItem from '../../components/checkout-item/checkout-item.component';\n\nimport {\n  selectCartItems,\n  selectCartTotal\n} from '../../redux/cart/cart.selectors';\n\nimport {\n  CheckoutPageContainer,\n  CheckoutHeaderContainer,\n  HeaderBlockContainer,\n  TotalContainer,\n  WarningContainer\n} from './checkout.styles';\n\nconst CheckoutPage = ({ cartItems, total }) => (\n  <CheckoutPageContainer>\n    <CheckoutHeaderContainer>\n      <HeaderBlockContainer>\n        <span>Product</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Description</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Quantity</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Price</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Remove</span>\n      </HeaderBlockContainer>\n    </CheckoutHeaderContainer>\n    {cartItems.map(cartItem => (\n      <CheckoutItem key={cartItem.id} cartItem={cartItem} />\n    ))}\n    <TotalContainer>TOTAL: ${total}</TotalContainer>\n    <WarningContainer>\n      *Please use the following test credit card for payments*\n      <br />\n      4242 4242 4242 4242 - Exp: 01/20 - CVV: 123\n    </WarningContainer>\n    <StripeCheckoutButton price={total} />\n  </CheckoutPageContainer>\n);\n\nconst mapStateToProps = createStructuredSelector({\n  cartItems: selectCartItems,\n  total: selectCartTotal\n});\n\nexport default connect(mapStateToProps)(CheckoutPage);\n"],"sourceRoot":""}